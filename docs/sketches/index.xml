<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sketches on alvise.xyz</title><link>https://www.alvise.xyz/sketches/</link><description>Recent content in Sketches on alvise.xyz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alvise.xyz/sketches/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes on Dynamic Linking</title><link>https://www.alvise.xyz/sketches/dynamic-linking/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.alvise.xyz/sketches/dynamic-linking/</guid><description>What happens when your code calls printf()? And what&amp;rsquo;s up with all that.got.plt nonsense you see when decompiling a binary? Here are some sketches to visualize it.
Full Infographic.
Intro: Static vs Dynamic Linking First of all, we need to understand the difference between a statically linked binary and a dynamically linked one:</description></item><item><title>Software Security 101</title><link>https://www.alvise.xyz/sketches/software-security-101/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.alvise.xyz/sketches/software-security-101/</guid><description>These are a few sketches covering very basic topics of Computer Security.
Full Infographic.
Intro: Security Terminology Exploit? Bug? Attack Surface? What does that even mean?
The Stack Stack Smashing // TODO: stack
Format String Vulnerabilities If we can inject some special characters in a format string in C, we can also magically leak and modify previous data on the stack.</description></item><item><title>Stack Evolution During a Function Call</title><link>https://www.alvise.xyz/sketches/stack-evolution/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.alvise.xyz/sketches/stack-evolution/</guid><description/></item></channel></rss>